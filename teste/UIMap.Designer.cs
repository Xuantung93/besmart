// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace teste
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Abrir a aplicação e fazer enter
        /// </summary>
        public void Open_part1_EnterBtn()
        {
            #region Variable Declarations
            WinButton uIEnterButton = this.UIBeSMARTSoftwareWindow.UIEnterWindow.UIEnterButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Projetos\beSmart\trunk\Interface\bin\Debug\beSmart.exe'
            ApplicationUnderTest uIBeSMARTSoftwareWindow = ApplicationUnderTest.Launch(this.Open_part1_EnterBtnParams.UIBeSMARTSoftwareWindowExePath, this.Open_part1_EnterBtnParams.UIBeSMARTSoftwareWindowAlternateExePath);

            // Type '{Enter}' in 'Enter' button
            Keyboard.SendKeys(uIEnterButton, this.Open_part1_EnterBtnParams.UIEnterButtonSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Verifica se o interface está como era suposto
        /// </summary>
        public void Open_part1_VerifyControls()
        {
            #region Variable Declarations
            WinWindow uIBeSMARTSoftwareWindow = this.UIBeSMARTSoftwareWindow;
            WinTabList uITabControlSeparatesTabList = this.UIBeSMARTSoftwareWindow.UITabControlSeparatesWindow.UITabControlSeparatesTabList;
            #endregion

            // Verify that the 'ControlName' property of 'beSMART Software' window equals 'chooseProcess'
            Assert.AreEqual(this.Open_part1_VerifyControlsExpectedValues.UIBeSMARTSoftwareWindowControlName, uIBeSMARTSoftwareWindow.ControlName, "Não abriu o form correcto");

            // Verify that the 'SelectedIndex' property of 'tabControlSeparates' tab list equals '0'
            Assert.AreEqual(this.Open_part1_VerifyControlsExpectedValues.UITabControlSeparatesTabListSelectedIndex, uITabControlSeparatesTabList.SelectedIndex, "Não está seleccionado o tab que era suposto (index 0)");
        }
        
        /// <summary>
        /// Carrega o ficheiro exemplo.
        /// </summary>
        public void Open_LoadFileExample()
        {
            #region Variable Declarations
            WinButton uIEnterButton = this.UIBeSMARTSoftwareWindow.UIEnterWindow.UIEnterButton;
            WinMenuItem uIOpenMenuItem = this.UIBeSMARTSoftwareWindow.UIMenuStrip1MenuBar.UIDataBaseMenuItem.UIOpenMenuItem;
            WinEdit uINomeEdit = this.UIAbrirWindow.UIItemWindow.UINovobeSmartListItem.UINomeEdit;
            WinList uIVistadeItensList = this.UIAbrirWindow.UIShellViewClient.UIVistadeItensList;
            WinCell uIHttpwwwergogroupieCell = this.UIBeSMARTSoftwareWindow.UIDataGridViewTabelaSoWindow.UIDataGridViewTable.UILinha19Row.UIHttpwwwergogroupieCell;
            WinCell uIHttpwwwccasrummesmmeCell = this.UIBeSMARTSoftwareWindow.UIDataGridViewTabelaSoWindow.UIDataGridViewTable.UILinha20Row.UIHttpwwwccasrummesmmeCell;
            WinCell uIHttpwwwccasrupmaprodCell = this.UIBeSMARTSoftwareWindow.UIDataGridViewTabelaSoWindow.UIDataGridViewTable.UILinha21Row.UIHttpwwwccasrupmaprodCell;
            WinCell uIHttpwwwlamsadedauphiCell = this.UIBeSMARTSoftwareWindow.UIDataGridViewTabelaSoWindow.UIDataGridViewTable.UILinha22Row.UIHttpwwwlamsadedauphiCell;
            WinCell uIHttpwww4feucptlmcdiaCell = this.UIBeSMARTSoftwareWindow.UIDataGridViewTabelaSoWindow.UIDataGridViewTable.UILinha23Row.UIHttpwww4feucptlmcdiaCell;
            WinCell uIHttptgtoilcomenautomCell = this.UIBeSMARTSoftwareWindow.UIDataGridViewTabelaSoWindow.UIDataGridViewTable.UILinha24Row.UIHttptgtoilcomenautomCell;
            WinCell uIHttpwwwdecisiondeckoCell = this.UIBeSMARTSoftwareWindow.UIDataGridViewTabelaSoWindow.UIDataGridViewTable.UILinha25Row.UIHttpwwwdecisiondeckoCell;
            WinCell uIHttpwwwlpacoukCell = this.UIBeSMARTSoftwareWindow.UIDataGridViewTabelaSoWindow.UIDataGridViewTable.UILinha26Row.UIHttpwwwlpacoukCell;
            WinCell uIHttpusertninetsefde7Cell = this.UIBeSMARTSoftwareWindow.UIDataGridViewTabelaSoWindow.UIDataGridViewTable.UILinha27Row.UIHttpusertninetsefde7Cell;
            WinCell uIHttpwwwieeschEcoEng0Cell = this.UIBeSMARTSoftwareWindow.UIDataGridViewTabelaSoWindow.UIDataGridViewTable.UILinha28Row.UIHttpwwwieeschEcoEng0Cell;
            WinCell uIHttpwwwccasrummesmmeCell1 = this.UIBeSMARTSoftwareWindow.UIDataGridViewTabelaSoWindow.UIDataGridViewTable.UILinha29Row.UIHttpwwwccasrummesmmeCell;
            WinCell uIHttpwwwquartzstarcomCell = this.UIBeSMARTSoftwareWindow.UIDataGridViewTabelaSoWindow.UIDataGridViewTable.UILinha30Row.UIHttpwwwquartzstarcomCell;
            WinCell uIHttpwwwmatchwarecomeCell = this.UIBeSMARTSoftwareWindow.UIDataGridViewTabelaSoWindow.UIDataGridViewTable.UILinha31Row_UltimaLinhaGrelha.UIHttpwwwmatchwarecomeCell;
            #endregion

            // Launch '%USERPROFILE%\Documents\Projetos\beSmart\trunk\Interface\bin\Debug\beSmart.exe'
            ApplicationUnderTest uIBeSMARTSoftwareWindow = ApplicationUnderTest.Launch(this.Open_LoadFileExampleParams.UIBeSMARTSoftwareWindowExePath, this.Open_LoadFileExampleParams.UIBeSMARTSoftwareWindowAlternateExePath);

            // Type '{Enter}' in 'Enter' button
            Keyboard.SendKeys(uIEnterButton, this.Open_LoadFileExampleParams.UIEnterButtonSendKeys, ModifierKeys.None);

            // Click 'DataBase' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(78, 10));

            // Click 'Nome' text box
            Mouse.Click(uINomeEdit, new Point(42, 11));

            // Type '{Enter}' in 'Vista de Itens' list box
            Keyboard.SendKeys(uIVistadeItensList, this.Open_LoadFileExampleParams.UIVistadeItensListSendKeys, ModifierKeys.None);

            // Click 'http://www.ergogroup.ie/' cell
            Mouse.Click(uIHttpwwwergogroupieCell, new Point(97, 7));

            // Type '{Down}' in 'http://www.ergogroup.ie/' cell
            Keyboard.SendKeys(uIHttpwwwergogroupieCell, this.Open_LoadFileExampleParams.UIHttpwwwergogroupieCellSendKeys, ModifierKeys.None);

            // Type '{Down}' in 'http://www.ccas.ru/mmes/mmeda/fgm.htm' cell
            Keyboard.SendKeys(uIHttpwwwccasrummesmmeCell, this.Open_LoadFileExampleParams.UIHttpwwwccasrummesmmeCellSendKeys, ModifierKeys.None);

            // Type '{Down}' in 'http://www.ccas.ru/pma/product.htm' cell
            Keyboard.SendKeys(uIHttpwwwccasrupmaprodCell, this.Open_LoadFileExampleParams.UIHttpwwwccasrupmaprodCellSendKeys, ModifierKeys.None);

            // Type '{Down}' in 'http://www.lamsade.dauphine.fr/english/software.ht...' cell
            Keyboard.SendKeys(uIHttpwwwlamsadedauphiCell, this.Open_LoadFileExampleParams.UIHttpwwwlamsadedauphiCellSendKeys, ModifierKeys.None);

            // Type '{Down}' in 'http://www4.fe.uc.pt/lmcdias/iris.htm' cell
            Keyboard.SendKeys(uIHttpwww4feucptlmcdiaCell, this.Open_LoadFileExampleParams.UIHttpwww4feucptlmcdiaCellSendKeys, ModifierKeys.None);

            // Type '{Down}' in 'http://tgtoil.com/en/automan_software/' cell
            Keyboard.SendKeys(uIHttptgtoilcomenautomCell, this.Open_LoadFileExampleParams.UIHttptgtoilcomenautomCellSendKeys, ModifierKeys.None);

            // Type '{Down}' in 'http://www.decision-deck.org/' cell
            Keyboard.SendKeys(uIHttpwwwdecisiondeckoCell, this.Open_LoadFileExampleParams.UIHttpwwwdecisiondeckoCellSendKeys, ModifierKeys.None);

            // Type '{Down}' in 'http://www.lpa.co.uk/' cell
            Keyboard.SendKeys(uIHttpwwwlpacoukCell, this.Open_LoadFileExampleParams.UIHttpwwwlpacoukCellSendKeys, ModifierKeys.None);

            // Type '{Down}' in 'http://user.tninet.se/~fde729o/MOIRA/Software.htm' cell
            Keyboard.SendKeys(uIHttpusertninetsefde7Cell, this.Open_LoadFileExampleParams.UIHttpusertninetsefde7CellSendKeys, ModifierKeys.None);

            // Type '{Down}' in 'http://www.iees.ch/EcoEng001/EcoEng001_R3.html' cell
            Keyboard.SendKeys(uIHttpwwwieeschEcoEng0Cell, this.Open_LoadFileExampleParams.UIHttpwwwieeschEcoEng0CellSendKeys, ModifierKeys.None);

            // Type '{Down}' in 'http://www.ccas.ru/mmes/mmeda/papers/vodhoz.htm' cell
            Keyboard.SendKeys(uIHttpwwwccasrummesmmeCell1, this.Open_LoadFileExampleParams.UIHttpwwwccasrummesmmeCellSendKeys1, ModifierKeys.None);

            // Type '{Down}' in 'http://www.quartzstar.com/' cell
            Keyboard.SendKeys(uIHttpwwwquartzstarcomCell, this.Open_LoadFileExampleParams.UIHttpwwwquartzstarcomCellSendKeys, ModifierKeys.None);

            // Type '{Down}{Down}' in 'http://www.matchware.com/en/products/mediator/' cell
            Keyboard.SendKeys(uIHttpwwwmatchwarecomeCell, this.Open_LoadFileExampleParams.UIHttpwwwmatchwarecomeCellSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Verifica a informação
        /// </summary>
        public void Open_LoadFileExample_part2()
        {
            #region Variable Declarations
            WinRow uILinha31Row = this.UIBeSMARTSoftwareWindow.UIDataGridViewTabelaSoWindow.UIDataGridViewTable.UILinha31Row;
            #endregion

            // Verify that the 'Value' property of 'Linha 31' row equals '32;Mediator;http://www.matchware.com/en/products/mediator/;false;694;good;true;true;true;true'
            Assert.AreEqual(this.Open_LoadFileExample_part2ExpectedValues.UILinha31RowValue, uILinha31Row.Value, "Informação da ultima linha não está correcta");
        }
        
        /// <summary>
        /// Abre a aplicação e carrega o ficheiro exemplo.
        /// </summary>
        public void LoadFileExample()
        {
            #region Variable Declarations
            WinButton uIEnterButton = this.UIBeSMARTSoftwareWindow.UIEnterWindow.UIEnterButton;
            WinMenuItem uIOpenMenuItem = this.UIBeSMARTSoftwareWindow.UIMenuStrip1MenuBar.UIDataBaseMenuItem.UIOpenMenuItem;
            WinEdit uINomeEdit = this.UIAbrirWindow.UIItemWindow.UINovobeSmartListItem.UINomeEdit;
            WinList uIVistadeItensList = this.UIAbrirWindow.UIShellViewClient.UIVistadeItensList;
            #endregion

            // Launch '%USERPROFILE%\Documents\Projetos\beSmart\trunk\Interface\bin\Debug\beSmart.exe'
            ApplicationUnderTest uIBeSMARTSoftwareWindow = ApplicationUnderTest.Launch(this.LoadFileExampleParams.UIBeSMARTSoftwareWindowExePath, this.LoadFileExampleParams.UIBeSMARTSoftwareWindowAlternateExePath);

            // Type '{Enter}' in 'Enter' button
            Keyboard.SendKeys(uIEnterButton, this.LoadFileExampleParams.UIEnterButtonSendKeys, ModifierKeys.None);

            // Click 'DataBase' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(83, 9));

            // Click 'Nome' text box
            Mouse.Click(uINomeEdit, new Point(75, 0));

            // Type '{Enter}' in 'Vista de Itens' list box
            Keyboard.SendKeys(uIVistadeItensList, this.LoadFileExampleParams.UIVistadeItensListSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Verifica a ultima linha da grelha.
        /// </summary>
        public void LoadFileExample_2()
        {
            #region Variable Declarations
            WinCell uIItem32Cell = this.UIBeSMARTSoftwareWindow.UIDataGridViewTabelaSoWindow.UIDataGridViewTable.UILinha31Row_UltimaLinhaGrelha.UIItem32Cell;
            #endregion

            // Verify that the 'Value' property of '32' cell equals '32'
            Assert.AreEqual(this.LoadFileExample_2ExpectedValues.UIItem32CellValue, uIItem32Cell.Value, "A última linha não tem o ID que era suposto ter.");
        }
        
        /// <summary>
        /// Verifica se o botão Next não está activo.
        /// </summary>
        public void LoadFileExample_3()
        {
            #region Variable Declarations
            WinButton uINextButton = this.UIBeSMARTSoftwareWindow.UINextWindow.UINextButton;
            #endregion

            // Verify that the 'Enabled' property of 'Next >' button equals 'False'
            Assert.AreEqual(this.LoadFileExample_3ExpectedValues.UINextButtonEnabled, uINextButton.Enabled, "O botão \"Next\" não devia estar activo.");
        }
        
        #region Properties
        public virtual Open_part1_EnterBtnParams Open_part1_EnterBtnParams
        {
            get
            {
                if ((this.mOpen_part1_EnterBtnParams == null))
                {
                    this.mOpen_part1_EnterBtnParams = new Open_part1_EnterBtnParams();
                }
                return this.mOpen_part1_EnterBtnParams;
            }
        }
        
        public virtual Open_part1_VerifyControlsExpectedValues Open_part1_VerifyControlsExpectedValues
        {
            get
            {
                if ((this.mOpen_part1_VerifyControlsExpectedValues == null))
                {
                    this.mOpen_part1_VerifyControlsExpectedValues = new Open_part1_VerifyControlsExpectedValues();
                }
                return this.mOpen_part1_VerifyControlsExpectedValues;
            }
        }
        
        public virtual Open_LoadFileExampleParams Open_LoadFileExampleParams
        {
            get
            {
                if ((this.mOpen_LoadFileExampleParams == null))
                {
                    this.mOpen_LoadFileExampleParams = new Open_LoadFileExampleParams();
                }
                return this.mOpen_LoadFileExampleParams;
            }
        }
        
        public virtual Open_LoadFileExample_part2ExpectedValues Open_LoadFileExample_part2ExpectedValues
        {
            get
            {
                if ((this.mOpen_LoadFileExample_part2ExpectedValues == null))
                {
                    this.mOpen_LoadFileExample_part2ExpectedValues = new Open_LoadFileExample_part2ExpectedValues();
                }
                return this.mOpen_LoadFileExample_part2ExpectedValues;
            }
        }
        
        public virtual LoadFileExampleParams LoadFileExampleParams
        {
            get
            {
                if ((this.mLoadFileExampleParams == null))
                {
                    this.mLoadFileExampleParams = new LoadFileExampleParams();
                }
                return this.mLoadFileExampleParams;
            }
        }
        
        public virtual LoadFileExample_2ExpectedValues LoadFileExample_2ExpectedValues
        {
            get
            {
                if ((this.mLoadFileExample_2ExpectedValues == null))
                {
                    this.mLoadFileExample_2ExpectedValues = new LoadFileExample_2ExpectedValues();
                }
                return this.mLoadFileExample_2ExpectedValues;
            }
        }
        
        public virtual LoadFileExample_3ExpectedValues LoadFileExample_3ExpectedValues
        {
            get
            {
                if ((this.mLoadFileExample_3ExpectedValues == null))
                {
                    this.mLoadFileExample_3ExpectedValues = new LoadFileExample_3ExpectedValues();
                }
                return this.mLoadFileExample_3ExpectedValues;
            }
        }
        
        public UIBeSMARTSoftwareWindow UIBeSMARTSoftwareWindow
        {
            get
            {
                if ((this.mUIBeSMARTSoftwareWindow == null))
                {
                    this.mUIBeSMARTSoftwareWindow = new UIBeSMARTSoftwareWindow();
                }
                return this.mUIBeSMARTSoftwareWindow;
            }
        }
        
        public UIAbrirWindow UIAbrirWindow
        {
            get
            {
                if ((this.mUIAbrirWindow == null))
                {
                    this.mUIAbrirWindow = new UIAbrirWindow();
                }
                return this.mUIAbrirWindow;
            }
        }
        #endregion
        
        #region Fields
        private Open_part1_EnterBtnParams mOpen_part1_EnterBtnParams;
        
        private Open_part1_VerifyControlsExpectedValues mOpen_part1_VerifyControlsExpectedValues;
        
        private Open_LoadFileExampleParams mOpen_LoadFileExampleParams;
        
        private Open_LoadFileExample_part2ExpectedValues mOpen_LoadFileExample_part2ExpectedValues;
        
        private LoadFileExampleParams mLoadFileExampleParams;
        
        private LoadFileExample_2ExpectedValues mLoadFileExample_2ExpectedValues;
        
        private LoadFileExample_3ExpectedValues mLoadFileExample_3ExpectedValues;
        
        private UIBeSMARTSoftwareWindow mUIBeSMARTSoftwareWindow;
        
        private UIAbrirWindow mUIAbrirWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_part1_EnterBtn'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class Open_part1_EnterBtnParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Projetos\beSmart\trunk\Interface\bin\Debug\beSmart.exe'
        /// </summary>
        public string UIBeSMARTSoftwareWindowExePath = "C:\\Users\\Miguel\\Documents\\Projetos\\beSmart\\trunk\\Interface\\bin\\Debug\\beSmart.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Projetos\beSmart\trunk\Interface\bin\Debug\beSmart.exe'
        /// </summary>
        public string UIBeSMARTSoftwareWindowAlternateExePath = "%USERPROFILE%\\Documents\\Projetos\\beSmart\\trunk\\Interface\\bin\\Debug\\beSmart.exe";
        
        /// <summary>
        /// Type '{Enter}' in 'Enter' button
        /// </summary>
        public string UIEnterButtonSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_part1_VerifyControls'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class Open_part1_VerifyControlsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlName' property of 'beSMART Software' window equals 'chooseProcess'
        /// </summary>
        public string UIBeSMARTSoftwareWindowControlName = "chooseProcess";
        
        /// <summary>
        /// Verify that the 'SelectedIndex' property of 'tabControlSeparates' tab list equals '0'
        /// </summary>
        public int UITabControlSeparatesTabListSelectedIndex = 0;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_LoadFileExample'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class Open_LoadFileExampleParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Projetos\beSmart\trunk\Interface\bin\Debug\beSmart.exe'
        /// </summary>
        public string UIBeSMARTSoftwareWindowExePath = "C:\\Users\\Miguel\\Documents\\Projetos\\beSmart\\trunk\\Interface\\bin\\Debug\\beSmart.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Projetos\beSmart\trunk\Interface\bin\Debug\beSmart.exe'
        /// </summary>
        public string UIBeSMARTSoftwareWindowAlternateExePath = "%USERPROFILE%\\Documents\\Projetos\\beSmart\\trunk\\Interface\\bin\\Debug\\beSmart.exe";
        
        /// <summary>
        /// Type '{Enter}' in 'Enter' button
        /// </summary>
        public string UIEnterButtonSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'Vista de Itens' list box
        /// </summary>
        public string UIVistadeItensListSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Down}' in 'http://www.ergogroup.ie/' cell
        /// </summary>
        public string UIHttpwwwergogroupieCellSendKeys = "{Down}";
        
        /// <summary>
        /// Type '{Down}' in 'http://www.ccas.ru/mmes/mmeda/fgm.htm' cell
        /// </summary>
        public string UIHttpwwwccasrummesmmeCellSendKeys = "{Down}";
        
        /// <summary>
        /// Type '{Down}' in 'http://www.ccas.ru/pma/product.htm' cell
        /// </summary>
        public string UIHttpwwwccasrupmaprodCellSendKeys = "{Down}";
        
        /// <summary>
        /// Type '{Down}' in 'http://www.lamsade.dauphine.fr/english/software.ht...' cell
        /// </summary>
        public string UIHttpwwwlamsadedauphiCellSendKeys = "{Down}";
        
        /// <summary>
        /// Type '{Down}' in 'http://www4.fe.uc.pt/lmcdias/iris.htm' cell
        /// </summary>
        public string UIHttpwww4feucptlmcdiaCellSendKeys = "{Down}";
        
        /// <summary>
        /// Type '{Down}' in 'http://tgtoil.com/en/automan_software/' cell
        /// </summary>
        public string UIHttptgtoilcomenautomCellSendKeys = "{Down}";
        
        /// <summary>
        /// Type '{Down}' in 'http://www.decision-deck.org/' cell
        /// </summary>
        public string UIHttpwwwdecisiondeckoCellSendKeys = "{Down}";
        
        /// <summary>
        /// Type '{Down}' in 'http://www.lpa.co.uk/' cell
        /// </summary>
        public string UIHttpwwwlpacoukCellSendKeys = "{Down}";
        
        /// <summary>
        /// Type '{Down}' in 'http://user.tninet.se/~fde729o/MOIRA/Software.htm' cell
        /// </summary>
        public string UIHttpusertninetsefde7CellSendKeys = "{Down}";
        
        /// <summary>
        /// Type '{Down}' in 'http://www.iees.ch/EcoEng001/EcoEng001_R3.html' cell
        /// </summary>
        public string UIHttpwwwieeschEcoEng0CellSendKeys = "{Down}";
        
        /// <summary>
        /// Type '{Down}' in 'http://www.ccas.ru/mmes/mmeda/papers/vodhoz.htm' cell
        /// </summary>
        public string UIHttpwwwccasrummesmmeCellSendKeys1 = "{Down}";
        
        /// <summary>
        /// Type '{Down}' in 'http://www.quartzstar.com/' cell
        /// </summary>
        public string UIHttpwwwquartzstarcomCellSendKeys = "{Down}";
        
        /// <summary>
        /// Type '{Down}{Down}' in 'http://www.matchware.com/en/products/mediator/' cell
        /// </summary>
        public string UIHttpwwwmatchwarecomeCellSendKeys = "{Down}{Down}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_LoadFileExample_part2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class Open_LoadFileExample_part2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Value' property of 'Linha 31' row equals '32;Mediator;http://www.matchware.com/en/products/mediator/;false;694;good;true;true;true;true'
        /// </summary>
        public string UILinha31RowValue = "32;Mediator;http://www.matchware.com/en/products/mediator/;false;694;good;true;tr" +
            "ue;true;true";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LoadFileExample'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class LoadFileExampleParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Projetos\beSmart\trunk\Interface\bin\Debug\beSmart.exe'
        /// </summary>
        public string UIBeSMARTSoftwareWindowExePath = "C:\\Users\\Miguel\\Documents\\Projetos\\beSmart\\trunk\\Interface\\bin\\Debug\\beSmart.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Projetos\beSmart\trunk\Interface\bin\Debug\beSmart.exe'
        /// </summary>
        public string UIBeSMARTSoftwareWindowAlternateExePath = "%USERPROFILE%\\Documents\\Projetos\\beSmart\\trunk\\Interface\\bin\\Debug\\beSmart.exe";
        
        /// <summary>
        /// Type '{Enter}' in 'Enter' button
        /// </summary>
        public string UIEnterButtonSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'Vista de Itens' list box
        /// </summary>
        public string UIVistadeItensListSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LoadFileExample_2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class LoadFileExample_2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Value' property of '32' cell equals '32'
        /// </summary>
        public string UIItem32CellValue = "32";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LoadFileExample_3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class LoadFileExample_3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Next >' button equals 'False'
        /// </summary>
        public bool UINextButtonEnabled = false;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIBeSMARTSoftwareWindow : WinWindow
    {
        
        public UIBeSMARTSoftwareWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "beSMART Software";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("beSMART Software");
            #endregion
        }
        
        #region Properties
        public UIEnterWindow UIEnterWindow
        {
            get
            {
                if ((this.mUIEnterWindow == null))
                {
                    this.mUIEnterWindow = new UIEnterWindow(this);
                }
                return this.mUIEnterWindow;
            }
        }
        
        public UITabControlSeparatesWindow UITabControlSeparatesWindow
        {
            get
            {
                if ((this.mUITabControlSeparatesWindow == null))
                {
                    this.mUITabControlSeparatesWindow = new UITabControlSeparatesWindow(this);
                }
                return this.mUITabControlSeparatesWindow;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIDataGridViewTabelaSoWindow UIDataGridViewTabelaSoWindow
        {
            get
            {
                if ((this.mUIDataGridViewTabelaSoWindow == null))
                {
                    this.mUIDataGridViewTabelaSoWindow = new UIDataGridViewTabelaSoWindow(this);
                }
                return this.mUIDataGridViewTabelaSoWindow;
            }
        }
        
        public UINextWindow UINextWindow
        {
            get
            {
                if ((this.mUINextWindow == null))
                {
                    this.mUINextWindow = new UINextWindow(this);
                }
                return this.mUINextWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIEnterWindow mUIEnterWindow;
        
        private UITabControlSeparatesWindow mUITabControlSeparatesWindow;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        
        private UIDataGridViewTabelaSoWindow mUIDataGridViewTabelaSoWindow;
        
        private UINextWindow mUINextWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIEnterWindow : WinWindow
    {
        
        public UIEnterWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonLogin";
            this.WindowTitles.Add("beSMART Software");
            #endregion
        }
        
        #region Properties
        public WinButton UIEnterButton
        {
            get
            {
                if ((this.mUIEnterButton == null))
                {
                    this.mUIEnterButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIEnterButton.SearchProperties[WinButton.PropertyNames.Name] = "Enter";
                    this.mUIEnterButton.WindowTitles.Add("beSMART Software");
                    #endregion
                }
                return this.mUIEnterButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIEnterButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UITabControlSeparatesWindow : WinWindow
    {
        
        public UITabControlSeparatesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tabControlSeparates";
            this.WindowTitles.Add("beSMART Software");
            #endregion
        }
        
        #region Properties
        public WinTabList UITabControlSeparatesTabList
        {
            get
            {
                if ((this.mUITabControlSeparatesTabList == null))
                {
                    this.mUITabControlSeparatesTabList = new WinTabList(this);
                    #region Search Criteria
                    this.mUITabControlSeparatesTabList.WindowTitles.Add("beSMART Software");
                    #endregion
                }
                return this.mUITabControlSeparatesTabList;
            }
        }
        #endregion
        
        #region Fields
        private WinTabList mUITabControlSeparatesTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("beSMART Software");
            #endregion
        }
        
        #region Properties
        public UIDataBaseMenuItem UIDataBaseMenuItem
        {
            get
            {
                if ((this.mUIDataBaseMenuItem == null))
                {
                    this.mUIDataBaseMenuItem = new UIDataBaseMenuItem(this);
                }
                return this.mUIDataBaseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDataBaseMenuItem mUIDataBaseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIDataBaseMenuItem : WinMenuItem
    {
        
        public UIDataBaseMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "DataBase";
            this.WindowTitles.Add("beSMART Software");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("beSMART Software");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIDataGridViewTabelaSoWindow : WinWindow
    {
        
        public UIDataGridViewTabelaSoWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dataGridViewTabelaSoftware";
            this.WindowTitles.Add("beSMART Software");
            #endregion
        }
        
        #region Properties
        public UIDataGridViewTable UIDataGridViewTable
        {
            get
            {
                if ((this.mUIDataGridViewTable == null))
                {
                    this.mUIDataGridViewTable = new UIDataGridViewTable(this);
                }
                return this.mUIDataGridViewTable;
            }
        }
        #endregion
        
        #region Fields
        private UIDataGridViewTable mUIDataGridViewTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIDataGridViewTable : WinTable
    {
        
        public UIDataGridViewTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.WindowTitles.Add("beSMART Software");
            #endregion
        }
        
        #region Properties
        public WinRow UILinha2Row_LinhaIndex2
        {
            get
            {
                if ((this.mUILinha2Row_LinhaIndex2 == null))
                {
                    this.mUILinha2Row_LinhaIndex2 = new WinRow(this);
                    #region Search Criteria
                    this.mUILinha2Row_LinhaIndex2.SearchProperties[WinRow.PropertyNames.Value] = "3;Decision Lab;http://decisionlab.org.uk/;false;990;good;true;true;true;true";
                    this.mUILinha2Row_LinhaIndex2.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUILinha2Row_LinhaIndex2.WindowTitles.Add("beSMART Software");
                    #endregion
                }
                return this.mUILinha2Row_LinhaIndex2;
            }
        }
        
        public UILinha31Row_UltimaLinhaGrelha UILinha31Row_UltimaLinhaGrelha
        {
            get
            {
                if ((this.mUILinha31Row_UltimaLinhaGrelha == null))
                {
                    this.mUILinha31Row_UltimaLinhaGrelha = new UILinha31Row_UltimaLinhaGrelha(this);
                }
                return this.mUILinha31Row_UltimaLinhaGrelha;
            }
        }
        
        public UILinha19Row UILinha19Row
        {
            get
            {
                if ((this.mUILinha19Row == null))
                {
                    this.mUILinha19Row = new UILinha19Row(this);
                }
                return this.mUILinha19Row;
            }
        }
        
        public UILinha20Row UILinha20Row
        {
            get
            {
                if ((this.mUILinha20Row == null))
                {
                    this.mUILinha20Row = new UILinha20Row(this);
                }
                return this.mUILinha20Row;
            }
        }
        
        public UILinha21Row UILinha21Row
        {
            get
            {
                if ((this.mUILinha21Row == null))
                {
                    this.mUILinha21Row = new UILinha21Row(this);
                }
                return this.mUILinha21Row;
            }
        }
        
        public UILinha22Row UILinha22Row
        {
            get
            {
                if ((this.mUILinha22Row == null))
                {
                    this.mUILinha22Row = new UILinha22Row(this);
                }
                return this.mUILinha22Row;
            }
        }
        
        public UILinha23Row UILinha23Row
        {
            get
            {
                if ((this.mUILinha23Row == null))
                {
                    this.mUILinha23Row = new UILinha23Row(this);
                }
                return this.mUILinha23Row;
            }
        }
        
        public UILinha24Row UILinha24Row
        {
            get
            {
                if ((this.mUILinha24Row == null))
                {
                    this.mUILinha24Row = new UILinha24Row(this);
                }
                return this.mUILinha24Row;
            }
        }
        
        public UILinha25Row UILinha25Row
        {
            get
            {
                if ((this.mUILinha25Row == null))
                {
                    this.mUILinha25Row = new UILinha25Row(this);
                }
                return this.mUILinha25Row;
            }
        }
        
        public UILinha26Row UILinha26Row
        {
            get
            {
                if ((this.mUILinha26Row == null))
                {
                    this.mUILinha26Row = new UILinha26Row(this);
                }
                return this.mUILinha26Row;
            }
        }
        
        public UILinha27Row UILinha27Row
        {
            get
            {
                if ((this.mUILinha27Row == null))
                {
                    this.mUILinha27Row = new UILinha27Row(this);
                }
                return this.mUILinha27Row;
            }
        }
        
        public UILinha28Row UILinha28Row
        {
            get
            {
                if ((this.mUILinha28Row == null))
                {
                    this.mUILinha28Row = new UILinha28Row(this);
                }
                return this.mUILinha28Row;
            }
        }
        
        public UILinha29Row UILinha29Row
        {
            get
            {
                if ((this.mUILinha29Row == null))
                {
                    this.mUILinha29Row = new UILinha29Row(this);
                }
                return this.mUILinha29Row;
            }
        }
        
        public UILinha30Row UILinha30Row
        {
            get
            {
                if ((this.mUILinha30Row == null))
                {
                    this.mUILinha30Row = new UILinha30Row(this);
                }
                return this.mUILinha30Row;
            }
        }
        
        public WinRow UILinha31Row
        {
            get
            {
                if ((this.mUILinha31Row == null))
                {
                    this.mUILinha31Row = new WinRow(this);
                    #region Search Criteria
                    this.mUILinha31Row.SearchProperties[WinRow.PropertyNames.Name] = "Linha 31";
                    this.mUILinha31Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUILinha31Row.WindowTitles.Add("beSMART Software");
                    #endregion
                }
                return this.mUILinha31Row;
            }
        }
        #endregion
        
        #region Fields
        private WinRow mUILinha2Row_LinhaIndex2;
        
        private UILinha31Row_UltimaLinhaGrelha mUILinha31Row_UltimaLinhaGrelha;
        
        private UILinha19Row mUILinha19Row;
        
        private UILinha20Row mUILinha20Row;
        
        private UILinha21Row mUILinha21Row;
        
        private UILinha22Row mUILinha22Row;
        
        private UILinha23Row mUILinha23Row;
        
        private UILinha24Row mUILinha24Row;
        
        private UILinha25Row mUILinha25Row;
        
        private UILinha26Row mUILinha26Row;
        
        private UILinha27Row mUILinha27Row;
        
        private UILinha28Row mUILinha28Row;
        
        private UILinha29Row mUILinha29Row;
        
        private UILinha30Row mUILinha30Row;
        
        private WinRow mUILinha31Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UILinha31Row_UltimaLinhaGrelha : WinRow
    {
        
        public UILinha31Row_UltimaLinhaGrelha(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, ";Mediator;http://www.matchware.com/en/products/mediator/;false;694;good;true;true" +
                        ";true;true", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("beSMART Software");
            #endregion
        }
        
        #region Properties
        public WinCell UIHttpwwwmatchwarecomeCell
        {
            get
            {
                if ((this.mUIHttpwwwmatchwarecomeCell == null))
                {
                    this.mUIHttpwwwmatchwarecomeCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHttpwwwmatchwarecomeCell.SearchProperties[WinCell.PropertyNames.Value] = "http://www.matchware.com/en/products/mediator/";
                    this.mUIHttpwwwmatchwarecomeCell.WindowTitles.Add("beSMART Software");
                    #endregion
                }
                return this.mUIHttpwwwmatchwarecomeCell;
            }
        }
        
        public WinCell UIItem32Cell
        {
            get
            {
                if ((this.mUIItem32Cell == null))
                {
                    this.mUIItem32Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem32Cell.SearchProperties[WinCell.PropertyNames.Value] = "32";
                    this.mUIItem32Cell.WindowTitles.Add("beSMART Software");
                    #endregion
                }
                return this.mUIItem32Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHttpwwwmatchwarecomeCell;
        
        private WinCell mUIItem32Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UILinha19Row : WinRow
    {
        
        public UILinha19Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, ";Ergo;http://www.ergogroup.ie/;false;2134;very good;true;true;true;true", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("beSMART Software");
            #endregion
        }
        
        #region Properties
        public WinCell UIHttpwwwergogroupieCell
        {
            get
            {
                if ((this.mUIHttpwwwergogroupieCell == null))
                {
                    this.mUIHttpwwwergogroupieCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHttpwwwergogroupieCell.SearchProperties[WinCell.PropertyNames.Value] = "http://www.ergogroup.ie/";
                    this.mUIHttpwwwergogroupieCell.WindowTitles.Add("beSMART Software");
                    #endregion
                }
                return this.mUIHttpwwwergogroupieCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHttpwwwergogroupieCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UILinha20Row : WinRow
    {
        
        public UILinha20Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, ";Fgm;http://www.ccas.ru/mmes/mmeda/fgm.htm;false;0;good;true;true;true;true", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("beSMART Software");
            #endregion
        }
        
        #region Properties
        public WinCell UIHttpwwwccasrummesmmeCell
        {
            get
            {
                if ((this.mUIHttpwwwccasrummesmmeCell == null))
                {
                    this.mUIHttpwwwccasrummesmmeCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHttpwwwccasrummesmmeCell.SearchProperties[WinCell.PropertyNames.Value] = "http://www.ccas.ru/mmes/mmeda/fgm.htm";
                    this.mUIHttpwwwccasrummesmmeCell.WindowTitles.Add("beSMART Software");
                    #endregion
                }
                return this.mUIHttpwwwccasrummesmmeCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHttpwwwccasrummesmmeCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UILinha21Row : WinRow
    {
        
        public UILinha21Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, ";Solvex;http://www.ccas.ru/pma/product.htm;true;0;acceptable;true;false;false;tru" +
                        "e", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("beSMART Software");
            #endregion
        }
        
        #region Properties
        public WinCell UIHttpwwwccasrupmaprodCell
        {
            get
            {
                if ((this.mUIHttpwwwccasrupmaprodCell == null))
                {
                    this.mUIHttpwwwccasrupmaprodCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHttpwwwccasrupmaprodCell.SearchProperties[WinCell.PropertyNames.Value] = "http://www.ccas.ru/pma/product.htm";
                    this.mUIHttpwwwccasrupmaprodCell.WindowTitles.Add("beSMART Software");
                    #endregion
                }
                return this.mUIHttpwwwccasrupmaprodCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHttpwwwccasrupmaprodCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UILinha22Row : WinRow
    {
        
        public UILinha22Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, ";Electre Tri;http://www.lamsade.dauphine.fr/english/software.html#TRI;false;519;a" +
                        "cceptable;true;true;false;true", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("beSMART Software");
            #endregion
        }
        
        #region Properties
        public WinCell UIHttpwwwlamsadedauphiCell
        {
            get
            {
                if ((this.mUIHttpwwwlamsadedauphiCell == null))
                {
                    this.mUIHttpwwwlamsadedauphiCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHttpwwwlamsadedauphiCell.SearchProperties[WinCell.PropertyNames.Value] = "http://www.lamsade.dauphine.fr/english/software.html#TRI";
                    this.mUIHttpwwwlamsadedauphiCell.WindowTitles.Add("beSMART Software");
                    #endregion
                }
                return this.mUIHttpwwwlamsadedauphiCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHttpwwwlamsadedauphiCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UILinha23Row : WinRow
    {
        
        public UILinha23Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, ";Iris;http://www4.fe.uc.pt/lmcdias/iris.htm;false;1000;good;true;true;true;true", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("beSMART Software");
            #endregion
        }
        
        #region Properties
        public WinCell UIHttpwww4feucptlmcdiaCell
        {
            get
            {
                if ((this.mUIHttpwww4feucptlmcdiaCell == null))
                {
                    this.mUIHttpwww4feucptlmcdiaCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHttpwww4feucptlmcdiaCell.SearchProperties[WinCell.PropertyNames.Value] = "http://www4.fe.uc.pt/lmcdias/iris.htm";
                    this.mUIHttpwww4feucptlmcdiaCell.WindowTitles.Add("beSMART Software");
                    #endregion
                }
                return this.mUIHttpwww4feucptlmcdiaCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHttpwww4feucptlmcdiaCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UILinha24Row : WinRow
    {
        
        public UILinha24Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, ";Automan;http://tgtoil.com/en/automan_software/;false;56;acceptable;true;true;tru" +
                        "e;true", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("beSMART Software");
            #endregion
        }
        
        #region Properties
        public WinCell UIHttptgtoilcomenautomCell
        {
            get
            {
                if ((this.mUIHttptgtoilcomenautomCell == null))
                {
                    this.mUIHttptgtoilcomenautomCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHttptgtoilcomenautomCell.SearchProperties[WinCell.PropertyNames.Value] = "http://tgtoil.com/en/automan_software/";
                    this.mUIHttptgtoilcomenautomCell.WindowTitles.Add("beSMART Software");
                    #endregion
                }
                return this.mUIHttptgtoilcomenautomCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHttptgtoilcomenautomCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UILinha25Row : WinRow
    {
        
        public UILinha25Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, ";Decision Deck;http://www.decision-deck.org/;true;0;good;true;false;false;true", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("beSMART Software");
            #endregion
        }
        
        #region Properties
        public WinCell UIHttpwwwdecisiondeckoCell
        {
            get
            {
                if ((this.mUIHttpwwwdecisiondeckoCell == null))
                {
                    this.mUIHttpwwwdecisiondeckoCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHttpwwwdecisiondeckoCell.SearchProperties[WinCell.PropertyNames.Value] = "http://www.decision-deck.org/";
                    this.mUIHttpwwwdecisiondeckoCell.WindowTitles.Add("beSMART Software");
                    #endregion
                }
                return this.mUIHttpwwwdecisiondeckoCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHttpwwwdecisiondeckoCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UILinha26Row : WinRow
    {
        
        public UILinha26Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, ";Lpa Visirule;http://www.lpa.co.uk/;true;0;good;true;true;true;true", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("beSMART Software");
            #endregion
        }
        
        #region Properties
        public WinCell UIHttpwwwlpacoukCell
        {
            get
            {
                if ((this.mUIHttpwwwlpacoukCell == null))
                {
                    this.mUIHttpwwwlpacoukCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHttpwwwlpacoukCell.SearchProperties[WinCell.PropertyNames.Value] = "http://www.lpa.co.uk/";
                    this.mUIHttpwwwlpacoukCell.WindowTitles.Add("beSMART Software");
                    #endregion
                }
                return this.mUIHttpwwwlpacoukCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHttpwwwlpacoukCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UILinha27Row : WinRow
    {
        
        public UILinha27Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, ";Moira;http://user.tninet.se/~fde729o/MOIRA/Software.htm;false;0;acceptable;false" +
                        ";false;false;true", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("beSMART Software");
            #endregion
        }
        
        #region Properties
        public WinCell UIHttpusertninetsefde7Cell
        {
            get
            {
                if ((this.mUIHttpusertninetsefde7Cell == null))
                {
                    this.mUIHttpusertninetsefde7Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHttpusertninetsefde7Cell.SearchProperties[WinCell.PropertyNames.Value] = "http://user.tninet.se/~fde729o/MOIRA/Software.htm";
                    this.mUIHttpusertninetsefde7Cell.WindowTitles.Add("beSMART Software");
                    #endregion
                }
                return this.mUIHttpusertninetsefde7Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHttpusertninetsefde7Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UILinha28Row : WinRow
    {
        
        public UILinha28Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, ";Sanex;http://www.iees.ch/EcoEng001/EcoEng001_R3.html;false;0;very good;true;true" +
                        ";false;true", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("beSMART Software");
            #endregion
        }
        
        #region Properties
        public WinCell UIHttpwwwieeschEcoEng0Cell
        {
            get
            {
                if ((this.mUIHttpwwwieeschEcoEng0Cell == null))
                {
                    this.mUIHttpwwwieeschEcoEng0Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHttpwwwieeschEcoEng0Cell.SearchProperties[WinCell.PropertyNames.Value] = "http://www.iees.ch/EcoEng001/EcoEng001_R3.html";
                    this.mUIHttpwwwieeschEcoEng0Cell.WindowTitles.Add("beSMART Software");
                    #endregion
                }
                return this.mUIHttpwwwieeschEcoEng0Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHttpwwwieeschEcoEng0Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UILinha29Row : WinRow
    {
        
        public UILinha29Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, ";Water Quality Planning Dss;http://www.ccas.ru/mmes/mmeda/papers/vodhoz.htm;false" +
                        ";0;acceptable;false;false;false;true", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("beSMART Software");
            #endregion
        }
        
        #region Properties
        public WinCell UIHttpwwwccasrummesmmeCell
        {
            get
            {
                if ((this.mUIHttpwwwccasrummesmmeCell == null))
                {
                    this.mUIHttpwwwccasrummesmmeCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHttpwwwccasrummesmmeCell.SearchProperties[WinCell.PropertyNames.Value] = "http://www.ccas.ru/mmes/mmeda/papers/vodhoz.htm";
                    this.mUIHttpwwwccasrummesmmeCell.WindowTitles.Add("beSMART Software");
                    #endregion
                }
                return this.mUIHttpwwwccasrummesmmeCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHttpwwwccasrummesmmeCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UILinha30Row : WinRow
    {
        
        public UILinha30Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, ";Hipriority;http://www.quartzstar.com/;false;1969;very bad;true;true;true;true", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("beSMART Software");
            #endregion
        }
        
        #region Properties
        public WinCell UIHttpwwwquartzstarcomCell
        {
            get
            {
                if ((this.mUIHttpwwwquartzstarcomCell == null))
                {
                    this.mUIHttpwwwquartzstarcomCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIHttpwwwquartzstarcomCell.SearchProperties[WinCell.PropertyNames.Value] = "http://www.quartzstar.com/";
                    this.mUIHttpwwwquartzstarcomCell.WindowTitles.Add("beSMART Software");
                    #endregion
                }
                return this.mUIHttpwwwquartzstarcomCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIHttpwwwquartzstarcomCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UINextWindow : WinWindow
    {
        
        public UINextWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonNextChooseSoftware";
            this.WindowTitles.Add("beSMART Software");
            #endregion
        }
        
        #region Properties
        public WinButton UINextButton
        {
            get
            {
                if ((this.mUINextButton == null))
                {
                    this.mUINextButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINextButton.SearchProperties[WinButton.PropertyNames.Name] = "Next   >";
                    this.mUINextButton.WindowTitles.Add("beSMART Software");
                    #endregion
                }
                return this.mUINextButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINextButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIAbrirWindow : WinWindow
    {
        
        public UIAbrirWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Abrir";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Abrir");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIAbrirWindow1 UIAbrirWindow1
        {
            get
            {
                if ((this.mUIAbrirWindow1 == null))
                {
                    this.mUIAbrirWindow1 = new UIAbrirWindow1(this);
                }
                return this.mUIAbrirWindow1;
            }
        }
        
        public UIShellViewClient UIShellViewClient
        {
            get
            {
                if ((this.mUIShellViewClient == null))
                {
                    this.mUIShellViewClient = new UIShellViewClient(this);
                }
                return this.mUIShellViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIAbrirWindow1 mUIAbrirWindow1;
        
        private UIShellViewClient mUIShellViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Vista de Itens";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Abrir");
            #endregion
        }
        
        #region Properties
        public UINovobeSmartListItem UINovobeSmartListItem
        {
            get
            {
                if ((this.mUINovobeSmartListItem == null))
                {
                    this.mUINovobeSmartListItem = new UINovobeSmartListItem(this);
                }
                return this.mUINovobeSmartListItem;
            }
        }
        #endregion
        
        #region Fields
        private UINovobeSmartListItem mUINovobeSmartListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UINovobeSmartListItem : WinListItem
    {
        
        public UINovobeSmartListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "novo.beSmart";
            this.WindowTitles.Add("Abrir");
            #endregion
        }
        
        #region Properties
        public WinEdit UINomeEdit
        {
            get
            {
                if ((this.mUINomeEdit == null))
                {
                    this.mUINomeEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINomeEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Nome";
                    this.mUINomeEdit.WindowTitles.Add("Abrir");
                    #endregion
                }
                return this.mUINomeEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINomeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIAbrirWindow1 : WinWindow
    {
        
        public UIAbrirWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Abrir");
            #endregion
        }
        
        #region Properties
        public WinButton UIAbrirButton
        {
            get
            {
                if ((this.mUIAbrirButton == null))
                {
                    this.mUIAbrirButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAbrirButton.SearchProperties[WinButton.PropertyNames.Name] = "Abrir";
                    this.mUIAbrirButton.WindowTitles.Add("Abrir");
                    #endregion
                }
                return this.mUIAbrirButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAbrirButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIShellViewClient : WinClient
    {
        
        public UIShellViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Vista de Pastas da Shell";
            this.WindowTitles.Add("Abrir");
            #endregion
        }
        
        #region Properties
        public WinList UIVistadeItensList
        {
            get
            {
                if ((this.mUIVistadeItensList == null))
                {
                    this.mUIVistadeItensList = new WinList(this);
                    #region Search Criteria
                    this.mUIVistadeItensList.SearchProperties[WinList.PropertyNames.Name] = "Vista de Itens";
                    this.mUIVistadeItensList.WindowTitles.Add("Abrir");
                    #endregion
                }
                return this.mUIVistadeItensList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIVistadeItensList;
        #endregion
    }
}
